<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.market.dao.AdminMapper">

	<!-- 직원인지 확인 -->
	<select id="StaffOnlyChk" parameterType="String" resultType="String">
		select 
			emp_num as empNum
		from
			emp_table
		where
			emp_num || emp_name = #{chkMessage }
	</select>

	<!-- 1.페이징 -->
	<select id = "getTotalRecordsCount" resultType = "int" parameterType = "HashMap">
 		select
 			count(*)
 		from
 			item_table
 		<where>
 			<if test = "searchWord != ''">
 				item_num in (select item_Num
			 					from item_table
			 					where item_name like '%'||#{searchWord }||'%')
 			</if>
 			<if test = "category != 0">
 			and
 				category_num = #{category }
 			</if>
 		</where>
 	</select>
 	
 	<!-- 상품목록 불러오기 -->
 	<select id = "getItemList" resultType = "Item" parameterType = "HashMap">
 		select distinct
 			it.item_num as itemNum,
 			it.item_name as itemName,
 			it.price as price,
 			it.item_amount as itemAmount,
 			(select distinct ct.category_name
 				from category_table ct
 				where ct.category_num = it.category_num) as categoryName
 		from
 			item_table it,
 			(select rownum as rn, item_num as ln
 			from item_table
 			order by item_num) rt
 		where
 			it.item_num = rt.ln
		and
		<if test = "searchWord != ''">
			it.item_num in (select item_num
		        			from item_table
							where item_name like '%'||#{searchWord }||'%')
			and
		</if>
 		<if test = "category != 0">
			category_num = #{category }
			and
		</if>
			rt.rn between #{startRecord } + 1 and #{startRecord } + #{countPerPage }
 		order by item_num
 	</select>
 	
 	<!-- 상품 삭제 -->
 	<delete id = "itemDelete" parameterType = "List">
 		delete from item_table
 		where item_num = 
 		<foreach collection='list' index="index" item='item' separator="or item_num =" open=" " close=" ">
		#{item }
		</foreach>
 	</delete>
 	
 	<!-- 상품 등록 -->
 	<insert id = "itemInsert" parameterType = "HashMap">
 		insert into item_table(
			item_num,
			category_num,
			item_name,
			price,
			item_amount 		
 		)
 		values (
 			item_num_seq.nextval,
 			#{category },
 			#{itemName },
 			#{intPrice },
 			#{itemAmount }
 		)
 	</insert>

 	<!-- 직원 ID 등록 -->
	<insert id="adminRegister" parameterType="Emp">
		insert into emp_table
		values
		(
			emp_num_seq.nextval,
			#{empPw },
			#{empName },
			#{empCall },
			#{empMail },
			#{position }
		)	
	</insert>
	
	<!-- 로그인 -->
	<select id="selectEmpNm" parameterType="Emp" resultType="String">
		select
			emp_name as empName
		from
			emp_table
		where
			emp_num = #{empNum }
			and
			emp_pw = #{empPw }
	</select>
	
	<!-- 로그인 정보 가져오기 -->
	<select id="getEmpInfoList" parameterType="HashMap" resultType="Emp">
		select
			emp_name as empName,
			position
		from
			emp_table
		where
			emp_num = #{empNum }
			and
			emp_pw = #{empPw }
	</select>
	
	<!-- 직원 리스트 조회 -->
	<select id="getEmpList" parameterType="HashMap" resultType="Emp">
		select
			et.emp_num as empNum,
		    et.emp_name as empName,
		    et.position as position,
		    et.emp_call as empCall,
		    <choose>
		    	<when test="loginPosition == '사장'">
		    		et.emp_mail as empMail
		    	</when>
		    	<otherwise>
					rpad(
						substr(substr(et.emp_mail, 1, instr(et.emp_mail, '@') - 1), 1, 2), 
						lengthb(substr(et.emp_mail, 1, instr(et.emp_mail, '@') - 1)), '*')
					|| '@' ||
					rpad(
						substr(substr(et.emp_mail, instr(et.emp_mail, '@') + 1), 1, 1), 
						lengthb(substr(et.emp_mail, instr(et.emp_mail, '@') + 1)), '*') as empMail
		    	</otherwise>
		    </choose>
		from
		   emp_table et,
		   (select
		        rownum as rn,
		        emp_num as en
		    from
		        emp_table
		    <where>
		    	<if test = "searchWord != '' || searchWord != null">
			    	<if test="searchType == 'searchEmpName'">
						emp_name like '%' || #{searchWord } || '%'
					</if>
					<if test="searchType == 'searchEmpNum'">
						emp_num like '%' || #{searchWord } || '%'
					</if>
					<if test="searchType == 'searchPosition'">
						position like '%' || #{searchWord } || '%'
					</if>
				</if>
			</where>	
		    order by
		        emp_num desc) rt
		<where>
			<if test = "searchWord != '' || searchWord != null">
				et.emp_num = rt.en
				and
			    rt.rn between #{startRecord } + 1 and #{startRecord } + #{countPerPage }
		    </if>
			<if test="searchType == 'searchEmpName'">
				and
				et.emp_name like '%' || #{searchWord } || '%'
			</if>
			<if test="searchType == 'searchEmpNum'">
				and
				et.emp_num like '%' || #{searchWord } || '%'
			</if>
			<if test="searchType == 'searchPosition'">
				and
				et.position like '%' || #{searchWord } || '%'
			</if>
		</where>
		order by emp_num desc
	</select>
	
	<!-- 총 직원 수 조회  (페이징) -->
	<select id="getEmpTotalRecordsCount" parameterType="HashMap" resultType="int">
		select
			count(*)
		from
			emp_table
		<where>
			<if test="searchType == 'searchEmpName'">
				emp_name like '%' || #{searchWord } || '%'
			</if>
			<if test="searchType == 'searchEmpNum'">
				emp_num like '%' || #{searchWord } || '%'
			</if>
			<if test="searchType == 'searchPosition'">
				position like '%' || #{searchWord } || '%'
			</if>			
		</where>
	</select>
	
	<!-- 직원 번호로 해당 직원 정보 조회 -->
	<select id="readEmp" parameterType="int" resultType="Emp">
		select
			emp_num as empNum,
			emp_name as empName,
			emp_call as empCall,
			emp_mail as empMail,
			position as position
		from
			emp_table
		where 
			emp_num = #{empNum }
	</select>
	
	<!-- 직원 정보 수정 -->
	<update id="empUpdate" parameterType="Emp">
		update 
			emp_table
		set
			emp_pw = #{empPw },
			emp_name = #{empName },
			emp_call = #{empCall },
			emp_mail = #{empMail },
			position = #{position }
		where
			emp_num = #{empNum }
	</update>
	
	<!-- 직원 정보 삭제 -->
	<delete id="empDelete" parameterType="int">
		delete from emp_table
		where
			emp_num = #{empNum }
	</delete>
	
	<!-- ID 찾기 -->
	<select id="selectEmpId" parameterType="Emp" resultType="int">
		select
			emp_num as empNum
		from
			emp_table
		where
			emp_name = #{empName }
			and
			emp_mail = #{empMail }
	</select>
	
	<!-- PW 찾기 전 해당하는 직원 찾기 -->
	<select id="findEmp" parameterType="Emp" resultType="int">
		select
			count(*)
		from
			emp_table
		where
			emp_num = #{empNum }
			and
			emp_mail = #{empMail }
	</select>
	
	<!-- PW 리셋 -->
	<update id="updatePw" parameterType="Emp">
		update 
			emp_table
		set
			emp_pw = #{empPw }
		where
			emp_mail = #{empMail }
	</update>
	
</mapper>